trigger: none
parameters:
  - name: AgentPool
    displayName: Pool VMImage Select
    type: string
    values:
      - TestAgent
      - Cloud-pool
      - Matrix-pool
      - CICD-Pool
      - digital-pool
      - MAVERICKpool
  - name: Linux-AgentEnabled
    type: boolean
    default: false
  - name: TestAgent
    displayName: Select Test Agent
    type: string
    values:
      - none
      - demo-vm-agent
      - myBuildAgent_1
      - myBuildAgent_2
      - myBuildAgent_3
      - myBuildAgent_4
  - name: CloudPoolEnabled
    type: boolean
    default: false
  - name: CloudPoolAgent
    displayName: Select Cloudpool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS02
      - SLAZERVDEVOPS03
      - SLAZERVDEVOPS04
      - value1
  - name: MatrixEnabled
    type: boolean
    default: false
  - name: MatrixPoolAgent
    displayName: Select Matrix Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS20
      - SLAZERVDEVOPS21
      - SLAZERVDEVOPS22
      - value1
      - value2
  - name: CICDPoolEnabled
    type: boolean
    default: false
  - name: CICDPoolAgent
    displayName: Select CICD-Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS08
      - SLAZERVDEVOPS09
      - SLAZEXVDEVOPS02
      - value1
      - value2
  - name: DigitalPoolEnabled
    type: boolean
    default: false
  - name: DigitalPoolAgent
    displayName: Select Digital Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS07
      - value1
      - value2
      - value3
      - value4
  - name: MAVERICKPoolEnabled
    type: boolean
    default: false
  - name: MAVERICKPoolAgent
    displayName: Select MAVERICK Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS01
      - SLAZERVDEVOPS04
      - SLAZERVDEVOPS10
      - value1
      - value2
  - name: helmVersion
    type: string
    default: v3.9.3
  - name: artifactoryURL
    type: string
    default: https://prod.artifactory.nfcu.net/artifactory
stages:
  - stage: InstallHelm
    displayName: Install Helm
    pool:
      name: ${{ parameters.AgentPool }}
      demands:
        - "${{ if eq(parameters.AgentPool, 'TestAgent') }}":
            - Agent.ComputerName -equals ${{ parameters.TestAgent }}
        - "${{ if eq(parameters.AgentPool, 'Cloud-pool') }}":
            - Agent.ComputerName -equals ${{ parameters.CloudPoolAgent }}
        - "${{ if eq(parameters.AgentPool, 'Matrix-pool') }}":
            - Agent.ComputerName -equals ${{ parameters.MatrixPoolAgent }}
        - "${{ if eq(parameters.AgentPool, 'CICD-Pool') }}":
            - Agent.ComputerName -equals ${{ parameters.CICDPoolAgent }}
        - "${{ if eq(parameters.AgentPool, 'digital-pool') }}":
            - Agent.ComputerName -equals ${{ parameters.DigitalPoolAgent }}
        - "${{ if eq(parameters.AgentPool, 'MAVERICKpool') }}":
            - Agent.ComputerName -equals ${{ parameters.MAVERICKPoolAgent }}
    jobs:
      - job: InstallHelm
        workspace:
          clean: all
        steps:
          - task: bash@3
            displayName: Install Helm
            continueOnError: false
            inputs:
              targetType: inline
              script: |
                set -e

                HELM_VERSION=${{ parameters.helmVersion }}
                INSTALL_DIR="/opt/cicd-tools/helm/${HELM_VERSION}"

                echo "Preparing to install Helm version ${HELM_VERSION}..."

                # Remove old Helm version if it exists
                if [ -d "$INSTALL_DIR" ]; then
                  echo "Removing old Helm version..."
                  rm -rf "$INSTALL_DIR"
                fi

                echo "Creating directory for Helm installation..."
                mkdir -p "$INSTALL_DIR"

                echo "Downloading Helm..."
                wget "https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz" -O helm.tar.gz
                if [ $? -ne 0 ]; then
                  echo "Error downloading Helm"
                  exit 1
                fi

                echo "Extracting Helm..."
                tar -zxf helm.tar.gz
                if [ $? -ne 0 ]; then
                  echo "Error extracting Helm"
                  exit 1
                fi

                echo "Moving Helm to /usr/local/bin..."
                mv linux-amd64/helm /usr/local/bin
                if [ $? -ne 0 ]; then
                  echo "Error moving Helm to /usr/local/bin"
                  exit 1
                fi

                echo "Cleaning up..."
                rm -rf helm.tar.gz
                rm -rf linux-amd64

                echo "Helm installation complete."

                echo "Verifying Helm installation..."
                helm version

                echo "Hostname: $(hostname)"

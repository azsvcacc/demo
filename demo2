name: Auto PR Creation with Reviewers

on:
  push:
    branches:
      - stage

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: stage
          base: master
          title: "Automated PR: Stage to Master"
          body: |
            This PR was automatically created.
          reviewers: approver-username # Replace with the GitHub username of the approver

      - name: Notify Approver
        run: echo "Pull request created. Approver: approver-username"

##############################################################

name: Stage to Prod Merge Workflow

on:
  push:
    branches:
      - stage # Trigger when changes are pushed to the stage branch

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: prod # Target branch for the pull request
          branch: stage # Source branch for the pull request
          title: "Merge Stage to Prod"
          body: |
            This is an automated pull request to merge changes from `stage` to `prod`.

  _#____________'_______________________
To convert the provided Jenkins declarative pipeline script (or its Approval stage) to a GitHub Actions workflow, here's how you can achieve it:

Converted GitHub Actions Workflow:

name: Deployment Approval Workflow

on:
  workflow_dispatch:
    inputs:
      IMAGE_TAG:
        description: "Image Tag to deploy"
        required: true
      Environment:
        description: "Environment to deploy to"
        required: true

jobs:
  approval:
    runs-on: ubuntu-latest
    steps:
      - name: Send Approval Email
        run: |
          echo "To approve, please click on this URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/approve"
          echo "Subject: DEPLOYMENT - ${{ github.job }} is waiting for your APPROVAL"
          echo "To: demo@demo.com"
          echo "Message: Approval to ${{ github.event.inputs.Environment }}"
      - name: Wait for Approval
        uses: hmarr/auto-approve-action@v2
        with:
          allow-user: "RELEASE_APPROVER"
      - name: Deploy to Environment
        if: success() && always()
        run: |
          echo "Deploying ${{ github.event.inputs.IMAGE_TAG }} to ${{ github.event.inputs.Environment }}"
          # Add your deployment steps here

Explanation of Changes:

1. Trigger Event:

workflow_dispatch is used to allow manual triggers of the workflow, which maps to the release approval in Jenkins.



2. Inputs:

IMAGE_TAG and Environment are defined as inputs for the workflow dispatch event.



3. Approval Email:

Simulates the email notification and approval process using echo to log relevant messages.



4. Approval Step:

Used a GitHub Action (hmarr/auto-approve-action) to simulate the manual approval process. Replace it with a custom approval step if needed.



5. Deployment Step:

Includes a placeholder for deployment logic, triggered after approval.




Let me know if you need specific actions integrated or further customizations!


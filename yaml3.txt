pool:
      name: ${{ parameters.AgentPool }}
      demands:
        - ${{ if eq(parameters.AgentPool, 'Test Agent') }}:
            - Agent.ComputerName -equals ${{ parameters['Test Agent'] }}
        - ${{ if eq(parameters.AgentPool, 'Cloud-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.CloudPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'Matrix-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.MatrixPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'CICD-Pool') }}:
            - Agent.ComputerName -equals ${{ parameters.CICDPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'Dihelmal-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.DihelmalPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'MAVERICKpool') }}:
            - Agent.ComputerName -equals ${{ parameters.MAVERICKPoolAgent }}
##################################################################

# Get the software name from the parameter
Software="${{ parameters.SoftwareName }}"

echo "Checking $Software version..."

# Check if the software is installed
if command -v $Software &> /dev/null; then
    # Determine the correct version command based on the software
    case $Software in
        java)
            # Java uses `-version` and captures only the first line
            version=$(java -version 2>&1 | head -n 1)
            ;;
        maven)
            # Maven uses `-v`
            version=$(mvn -v 2>&1)
            ;;
        python3)
            # Python 3 uses `--version`
            version=$(python3 --version 2>&1)
            ;;
        python)
            # Python 2 uses `--version`
            version=$(python --version 2>&1)
            ;;
        helm)
            # Helm uses `version --short`
            version=$(helm version --short 2>&1)
            ;;
        kubectl)
            # kubectl uses `version --client --short`
            version=$(kubectl version --client --short 2>&1)
            ;;
        git)
            # Git uses `--version`
            version=$(git --version 2>&1)
            ;;
        *)
            # General version commands with conditions
            if $Software --version &> /dev/null; then
                version=$($Software --version 2>&1)
            elif $Software -version &> /dev/null; then
                version=$($Software -version 2>&1)
            elif $Software version &> /dev/null; then
                version=$($Software version 2>&1)
            else
                version="Version command failed or not supported"
            fi
            ;;
    esac
    echo "$Software version: $version"
else
    echo "$Software is not installed."
    exit 1  # Exit with an error code if the software is not installed
fi

###################################################
# Set the software name from the pipeline parameters
Software="${{ parameters.SoftwareName }}"

# Determine the correct version command based on the software
case "$Software" in
    java)
        # Java uses `-version` and captures only the first line
        version=$(java -version 2>&1 | head -n 1)
        ;;
    
    maven)
        # Maven uses `-v`
        version=$(mvn -v 2>&1)
        ;;
    
    python3)
        # Python 3 uses `--version`
        version=$(python3 --version 2>&1)
        ;;
    
    python)
        # Python 2 uses `--version`
        version=$(python --version 2>&1)
        ;;
    
    helm)
        # Optionally move the helm binary if needed
        sudo mv /opt/cicd-tools/helm/3.10.2/helm /usr/local/bin &> /dev/null
        # Helm uses `version --short`
        version=$(helm version --short 2>&1)
        ;;
    
    kubectl)
        # kubectl uses `version --client --short`
        version=$(kubectl version --client --short 2>&1)
        ;;
    
    git)
        # Git uses `--version`
        version=$(git --version 2>&1)
        ;;
    
    git-lfs)
        # Git-lfs uses `--version`
        version=$(git-lfs --version 2>&1)
        ;;
    
    *)
        echo "Unknown software: $Software"
        exit 1
        ;;
esac

echo "$Software version: $version"


################################

# Set GRADLE_HOME dynamically based on pipeline parameters
export GRADLE_HOME=/opt/cicd-tools/${{ parameters.SoftwareName }}/${{ parameters.SoftwareVersion }}/${{ parameters.AvailableSoftware }}-bin/${{ parameters.AvailableSoftware }}

# Print the value to verify it's set correctly
echo "GRADLE_HOME is set to: $GRADLE_HOME"

# Add GRADLE_HOME and PATH to ~/.bashrc
echo "export GRADLE_HOME=$GRADLE_HOME" >> ~/.bashrc
echo 'export PATH=$PATH:$GRADLE_HOME/bin' >> ~/.bashrc

# Source the updated ~/.bashrc to apply changes in the current session
source ~/.bashrc

# Print the updated PATH to verify the change
echo "Updated PATH: $PATH"

# Verify the Gradle version to confirm it's correctly set up
version=$(gradle --version 2>&1)
echo "Gradle version: $version"

###################################
# Determine which Java version to select based on the parameter
      if [ "${AvailableSoftware}" = "jdk-17.0.1" ]; then
        echo "Installing and selecting Java 17.0.1"
        sudo update-alternatives --install /usr/bin/java java /usr/local/${{ parameters.AvailableSoftware }}/bin/java 1
        sudo update-alternatives --set java /usr/local/${{ parameters.AvailableSoftware }}/bin/java
      elif [ "${AvailableSoftware}" = "jdk-21.0.1" ]; then
        echo "Installing and selecting Java 21.0.1"
        sudo update-alternatives --install /usr/bin/java java /usr/local/${{ parameters.AvailableSoftware }}/bin/java 2
        sudo update-alternatives --set java /usr/local/${{ parameters.AvailableSoftware }}/bin/java
      else
        echo "Installing and selecting other version"
        sudo update-alternatives --install /usr/bin/java java /usr/local/${{ parameters.AvailableSoftware }}/bin/java 3
        sudo update-alternatives --set java /usr/local/${{ parameters.AvailableSoftware }}/bin/java
      fi



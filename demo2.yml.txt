trigger: none

parameters:
  - name: TestAgent
    type: boolean
    default: false

  - name: TestAgentName
    displayName: Select Test Agent
    type: string
    values:
      - none
      - myBuildAgent_1
      - myBuildAgent_2
      - myBuildAgent_3
      - myBuildAgent_4

  - name: CloudPool
    type: boolean
    default: false

  - name: CloudPoolAgent
    displayName: Select Cloudpool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS02
      - SLAZERVDEVOPS03
      - SLAZERVDEVOPS04
      - value1

  - name: Matrix
    type: boolean
    default: false

  - name: MatrixPoolAgent
    displayName: Select Matrix Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS20
      - SLAZERVDEVOPS21
      - SLAZERVDEVOPS22
      - value1
      - value2

  - name: CICDPool
    type: boolean
    default: false

  - name: CICDPoolAgent
    displayName: Select CICD-Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS08
      - SLAZERVDEVOPS09
      - SLAZEXVDEVOPS02
      - value1
      - value2

  - name: DigitalPool
    type: boolean
    default: false

  - name: DigitalPoolAgent
    displayName: Select Digital Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS07
      - value1
      - value2
      - value3
      - value4

  - name: MAVERICKPool
    type: boolean
    default: false

  - name: MAVERICKPoolAgent
    displayName: Select MAVERICK Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS01
      - SLAZERVDEVOPS04
      - SLAZERVDEVOPS10
      - value1
      - value2

  - name: helmVersion
    type: string
    default: v3.9.3

  - name: artifactoryURL
    type: string
    default: https://prod.artifactory.nfcu.net/artifactory

variables:
  - name: PoolName
    value: ${{ if eq(parameters.TestAgent, true) }} 'TestAgentPool'
             ${{ if eq(parameters.CloudPool, true) }} 'CloudPool'
             ${{ if eq(parameters.Matrix, true) }} 'MatrixPool'
             ${{ if eq(parameters.CICDPool, true) }} 'CICDPool'
             ${{ if eq(parameters.DigitalPool, true) }} 'DigitalPool'
             ${{ if eq(parameters.MAVERICKPool, true) }} 'MAVERICKPool'

  - name: AgentName
    value: ${{ if eq(parameters.TestAgent, true) }} ${{ parameters.TestAgentName }}
             ${{ if eq(parameters.CloudPool, true) }} ${{ parameters.CloudPoolAgent }}
             ${{ if eq(parameters.Matrix, true) }} ${{ parameters.MatrixPoolAgent }}
             ${{ if eq(parameters.CICDPool, true) }} ${{ parameters.CICDPoolAgent }}
             ${{ if eq(parameters.DigitalPool, true) }} ${{ parameters.DigitalPoolAgent }}
             ${{ if eq(parameters.MAVERICKPool, true) }} ${{ parameters.MAVERICKPoolAgent }}

stages:
  - stage: InstallHelm
    displayName: Install Helm

    jobs:
      - job: InstallHelm
        displayName: Install Helm Job
        condition: and(succeeded(), or(
          eq(variables['PoolName'], 'TestAgentPool'),
          eq(variables['PoolName'], 'CloudPool'),
          eq(variables['PoolName'], 'MatrixPool'),
          eq(variables['PoolName'], 'CICDPool'),
          eq(variables['PoolName'], 'DigitalPool'),
          eq(variables['PoolName'], 'MAVERICKPool')
        ))
        pool:
          name: ${{ variables.PoolName }}
          demands:
            - Agent.ComputerName -equals ${{ variables.AgentName }}

        steps:
          - task: bash@3
            displayName: Install Helm
            continueOnError: false
            inputs:
              targetType: inline
              script: |
                set -ax

                if [ -d "/opt/cicd-tools/helm/${{ parameters.helmVersion }}" ]; then
                  rm -rf /opt/cicd-tools/helm/${{ parameters.helmVersion }}
                fi

                echo "#============ =#"
                echo "# Install Helm  #"
                echo "#==============#"

                mkdir -p /opt/cicd-tools/helm/${{ parameters.helmVersion }}
                cd /opt/cicd-tools/helm/${{ parameters.helmVersion }}

                wget -q ${{ parameters.artifactoryURL }}/cicd-generic-release-local/helm/${{ parameters.helmVersion }}/linux/helm-${{ parameters.helmVersion }}-linux-amd64.tar.gz
                tar -zxf helm-${{ parameters.helmVersion }}-linux-amd64.tar.gz
                rm -rf helm-${{ parameters.helmVersion }}-linux-amd64.tar.gz

                ls -lart

                echo "#=====================#"
                echo "# Verify Helm Version #"
                echo "#=====================#"

                echo "Helm Version:" $(helm version)
                echo ""
                hostname

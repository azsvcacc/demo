pool:
      name: ${{ parameters.AgentPool }}
      demands:
        - ${{ if eq(parameters.AgentPool, 'Test Agent') }}:
            - Agent.ComputerName -equals ${{ parameters['Test Agent'] }}
        - ${{ if eq(parameters.AgentPool, 'Cloud-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.CloudPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'Matrix-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.MatrixPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'CICD-Pool') }}:
            - Agent.ComputerName -equals ${{ parameters.CICDPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'Dihelmal-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.DihelmalPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'MAVERICKpool') }}:
            - Agent.ComputerName -equals ${{ parameters.MAVERICKPoolAgent }}
##################################################################
I’m reaching out to follow up on my previous email regarding [briefly mention the topic, e.g., "the project progress update" or "the pending approval"]. I understand you may be busy, but I wanted to check in to see if there have been any developments.

If there’s any additional information you need from my side to facilitate the update, please let me know—I’d be happy to provide it.

Looking forward to hearing from you soon.

###########################################################

# Get the software name from the parameter
Software="${{ parameters.SoftwareName }}"

echo "Checking $Software version..."

# Check if the software is installed
if command -v $Software &> /dev/null; then
    # Determine the correct version command based on the software
    case $Software in
        java)
            # Java uses `-version` and captures only the first line
            version=$(java -version 2>&1 | head -n 1)
            ;;
        maven)
            # Maven uses `-v`
            version=$(mvn -v 2>&1)
            ;;
        python3)
            # Python 3 uses `--version`
            version=$(python3 --version 2>&1)
            ;;
        python)
            # Python 2 uses `--version`
            version=$(python --version 2>&1)
            ;;
        helm)
            # Helm uses `version --short`
            version=$(helm version --short 2>&1)
            ;;
        kubectl)
            # kubectl uses `version --client --short`
            version=$(kubectl version --client --short 2>&1)
            ;;
        git)
            # Git uses `--version`
            version=$(git --version 2>&1)
            ;;
        *)
            # General version commands with conditions
            if $Software --version &> /dev/null; then
                version=$($Software --version 2>&1)
            elif $Software -version &> /dev/null; then
                version=$($Software -version 2>&1)
            elif $Software version &> /dev/null; then
                version=$($Software version 2>&1)
            else
                version="Version command failed or not supported"
            fi
            ;;
    esac
    echo "$Software version: $version"
else
    echo "$Software is not installed."
    exit 1  # Exit with an error code if the software is not installed
fi

###################################################
# Set the software name from the pipeline parameters
Software="${{ parameters.SoftwareName }}"

# Determine the correct version command based on the software
case "$Software" in
    java)
        # Java uses `-version` and captures only the first line
        version=$(java -version 2>&1 | head -n 1)
        ;;
    
    maven)
        # Maven uses `-v`
        version=$(mvn -v 2>&1)
        ;;
    
    python3)
        # Python 3 uses `--version`
        version=$(python3 --version 2>&1)
        ;;
    
    python)
        # Python 2 uses `--version`
        version=$(python --version 2>&1)
        ;;
    
    helm)
        # Optionally move the helm binary if needed
        sudo mv /opt/cicd-tools/helm/3.10.2/helm /usr/local/bin &> /dev/null
        # Helm uses `version --short`
        version=$(helm version --short 2>&1)
        ;;
    
    kubectl)
        # kubectl uses `version --client --short`
        version=$(kubectl version --client --short 2>&1)
        ;;
    
    git)
        # Git uses `--version`
        version=$(git --version 2>&1)
        ;;
    
    git-lfs)
        # Git-lfs uses `--version`
        version=$(git-lfs --version 2>&1)
        ;;
    
    *)
        echo "Unknown software: $Software"
        exit 1
        ;;
esac

echo "$Software version: $version"


################################

# Set GRADLE_HOME dynamically based on pipeline parameters
export GRADLE_HOME=/opt/cicd-tools/${{ parameters.SoftwareName }}/${{ parameters.SoftwareVersion }}/${{ parameters.AvailableSoftware }}-bin/${{ parameters.AvailableSoftware }}

# Print the value to verify it's set correctly
echo "GRADLE_HOME is set to: $GRADLE_HOME"

# Add GRADLE_HOME and PATH to ~/.bashrc
echo "export GRADLE_HOME=$GRADLE_HOME" >> ~/.bashrc
echo 'export PATH=$PATH:$GRADLE_HOME/bin' >> ~/.bashrc

# Source the updated ~/.bashrc to apply changes in the current session
source ~/.bashrc

# Print the updated PATH to verify the change
echo "Updated PATH: $PATH"

# Verify the Gradle version to confirm it's correctly set up
version=$(gradle --version 2>&1)
echo "Gradle version: $version"

###################################
#!/bin/bash

# Define the desired Java version
desired_version="jdk-11.0.12"  # Adjust this to match your desired version

# Display all alternatives for java
alternatives_output=$(sudo update-alternatives --display java)

# Extract the path and priority for the desired version
software_path=$(echo "$alternatives_output" | awk -v ver="$desired_version" '
/^\/.*java/ { paths[NR] = $1 }
/^priority/ { priorities[NR] = $2 }
/^Current/ { current=NR }
END {
  for (i in paths) {
    if (index(paths[i], ver)) {
      print paths[i];
      exit;
    }
  }
}')

priority=$(echo "$alternatives_output" | awk -v ver="$desired_version" '
/^\/.*java/ { paths[NR] = $1 }
/^priority/ { priorities[NR] = $2 }
END {
  for (i in priorities) {
    if (index(paths[i], ver)) {
      print priorities[i];
      exit;
    }
  }
}')

if [ -z "$software_path" ]; then
  echo "Error: Java version ${desired_version} not found in alternatives."
  exit 1
fi

echo "Path for Java version ${desired_version}: $software_path"
echo "Priority for Java version ${desired_version}: $priority"

# Register and set the Java version
sudo update-alternatives --install /usr/bin/java java "$software_path" "$priority"
sudo update-alternatives --set java "$software_path"

# Source the updated profile (if needed)
source /etc/profile

# Verify the installed Java version
java_version=$(java -version 2>&1)
echo "Java version installed: $java_version"



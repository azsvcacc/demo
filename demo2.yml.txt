---
trigger: none
parameters:
  - name: AgentPool
    displayName: Pool Agent Select
    type: string
    values:
      - LinuxAgent
      - Cloud-pool
      - Matrix-pool
      - CICD-Pool
      - digital-pool
      - MAVERICKpool
  - name: LinuxAgentEnabled
    type: boolean
    default: false
  - name: LinuxAgent
    displayName: Select Test Agent
    type: string
    values:
      - none
      - Docker Agent - Linux
      - demo-vm-agent
      - myBuildAgent_1
      - myBuildAgent_2
      - myBuildAgent_3
      - myBuildAgent_4
  - name: CloudPoolEnabled
    type: boolean
    default: false
  - name: CloudPoolAgent
    displayName: Select Cloudpool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS02
      - SLAZERVDEVOPS03
      - SLAZERVDEVOPS04
      - value1
  - name: MatrixEnabled
    type: boolean
    default: false
  - name: MatrixPoolAgent
    displayName: Select Matrix Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS20
      - SLAZERVDEVOPS21
      - SLAZERVDEVOPS22
      - value1
      - value2
  - name: CICDPoolEnabled
    type: boolean
    default: false
  - name: CICDPoolAgent
    displayName: Select CICD-Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS08
      - SLAZERVDEVOPS09
      - SLAZEXVDEVOPS02
      - value1
      - value2
  - name: DigitalPoolEnabled
    type: boolean
    default: false
  - name: DigitalPoolAgent
    displayName: Select Digital Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS07
      - value1
      - value2
      - value3
      - value4
  - name: MAVERICKPoolEnabled
    type: boolean
    default: false
  - name: MAVERICKPoolAgent
    displayName: Select MAVERICK Pool Agent
    type: string
    values:
      - none
      - SLAZERVDEVOPS01
      - SLAZERVDEVOPS04
      - SLAZERVDEVOPS10
      - value1
      - value2
  - name: helmVersion
    displayName: Installable_Helm_Versions
    type: string
    default: v3.10.2
    values:
      - v3.10.2
      - v3.1.1
      - v3.9.3
  - name: artifactoryURL
    type: string
    default: https://prod.artifactory.nfcu.net/artifactory
stages:
  - stage: InstallHelm
    displayName: Install Helm
    pool:
       name: ${{ parameters.AgentPool }}
      # demands:
      #   - "${{ if eq(parameters.AgentPool, 'Docker Agent') }}":
      #       - Agent.ComputerName -equals ${{ parameters.LinuxAgent }}
      #   - "${{ if eq(parameters.AgentPool, 'Cloud-pool') }}":
      #       - Agent.ComputerName -equals ${{ parameters.CloudPoolAgent }}
      #   - "${{ if eq(parameters.AgentPool, 'Matrix-pool') }}":
      #       - Agent.ComputerName -equals ${{ parameters.MatrixPoolAgent }}
      #   - "${{ if eq(parameters.AgentPool, 'CICD-Pool') }}":
      #       - Agent.ComputerName -equals ${{ parameters.CICDPoolAgent }}
      #   - "${{ if eq(parameters.AgentPool, 'digital-pool') }}":
      #       - Agent.ComputerName -equals ${{ parameters.DigitalPoolAgent }}
      #   - "${{ if eq(parameters.AgentPool, 'MAVERICKpool') }}":
      #       - Agent.ComputerName -equals ${{ parameters.MAVERICKPoolAgent }}
    jobs:
      - job: InstallHelm
        workspace:
          clean: all
        steps:
          - task: bash@3
            displayName: Install Helm on Linux
            condition: eq(variables['Agent.OS'], 'Linux')
            inputs:
              targetType: inline
              script: |
                set -e
                echo "Installing Helm for Linux OS"
                
                if [ -d "/opt/cicd-tools/helm/${{ parameters.helmVersion }}" ]; then
                  rm -rf /opt/cicd-tools/helm/${{ parameters.helmVersion }}
                fi

                mkdir -p /opt/cicd-tools/helm/${{ parameters.helmVersion }}
                cd /opt/cicd-tools/helm/${{ parameters.helmVersion }}
                wget -q ${{ parameters.artifactoryURL }}/cicd-generic-release-local/helm/
                https://prod.artifactory.nfcu.net:443/artifactory/cicd-generic-release-local/helm/v3.10.2/
                # wget https://get.helm.sh/helm-${{ parameters.helmVersion }}-linux-amd64.tar.gz
                # tar -zxf helm-${{ parameters.helmVersion }}-linux-amd64.tar.gz
                # rm -f helm-${{ parameters.helmVersion }}-linux-amd64.tar.gz

                echo "Helm Version:"
                helm version
                hostname

          - task: PowerShell@2
            displayName: Install Helm on Windows
            condition: eq(variables['Agent.OS'], 'Windows_NT')
            inputs:
              targetType: inline
              script: |
                $ErrorActionPreference = "Stop"
                $helmVersion = "${{ parameters.helmVersion }}"
                $helmDir = "C:\cicd-tools\helm\$helmVersion"

                if (Test-Path $helmDir) {
                  Write-Host "Removing existing Helm directory..."
                  Remove-Item -Recurse -Force $helmDir
                }

                New-Item -ItemType Directory -Path $helmDir -Force | Out-Null
                Set-Location -Path $helmDir
                $helmZip = "helm-$helmVersion-windows-amd64.zip"
                Invoke-WebRequest -Uri "https://get.helm.sh/$helmZip" -OutFile $helmZip
                Expand-Archive -Path $helmZip -DestinationPath $helmDir -Force
                Remove-Item $helmZip

                Write-Host "Helm Version:"
                & "$helmDir\helm.exe" version
                hostname

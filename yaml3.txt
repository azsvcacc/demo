pool:
      name: ${{ parameters.AgentPool }}
      demands:
        - ${{ if eq(parameters.AgentPool, 'Test Agent') }}:
            - Agent.ComputerName -equals ${{ parameters['Test Agent'] }}
        - ${{ if eq(parameters.AgentPool, 'Cloud-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.CloudPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'Matrix-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.MatrixPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'CICD-Pool') }}:
            - Agent.ComputerName -equals ${{ parameters.CICDPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'Dihelmal-pool') }}:
            - Agent.ComputerName -equals ${{ parameters.DihelmalPoolAgent }}
        - ${{ if eq(parameters.AgentPool, 'MAVERICKpool') }}:
            - Agent.ComputerName -equals ${{ parameters.MAVERICKPoolAgent }}
##################################################################

# Get the software name from the parameter
Software="${{ parameters.SoftwareName }}"

echo "Checking $Software version..."

# Check if the software is installed
if command -v $Software &> /dev/null; then
    # Determine the correct version command based on the software
    case $Software in
        java)
            # Java uses `-version` and captures only the first line
            version=$(java -version 2>&1 | head -n 1)
            ;;
        maven)
            # Maven uses `-v`
            version=$(mvn -v 2>&1)
            ;;
        python3)
            # Python 3 uses `--version`
            version=$(python3 --version 2>&1)
            ;;
        python)
            # Python 2 uses `--version`
            version=$(python --version 2>&1)
            ;;
        helm)
            # Helm uses `version --short`
            version=$(helm version --short 2>&1)
            ;;
        kubectl)
            # kubectl uses `version --client --short`
            version=$(kubectl version --client --short 2>&1)
            ;;
        git)
            # Git uses `--version`
            version=$(git --version 2>&1)
            ;;
        *)
            # General version commands with conditions
            if $Software --version &> /dev/null; then
                version=$($Software --version 2>&1)
            elif $Software -version &> /dev/null; then
                version=$($Software -version 2>&1)
            elif $Software version &> /dev/null; then
                version=$($Software version 2>&1)
            else
                version="Version command failed or not supported"
            fi
            ;;
    esac
    echo "$Software version: $version"
else
    echo "$Software is not installed."
    exit 1  # Exit with an error code if the software is not installed
fi
